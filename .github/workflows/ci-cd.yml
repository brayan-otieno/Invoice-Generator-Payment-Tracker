name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:5.0
        ports:
          - 27017:27017
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'
        cache: 'npm'
    
    # Install server dependencies
    - name: Install server dependencies
      working-directory: ./server
      run: npm ci
    
    # Install client dependencies
    - name: Install client dependencies
      working-directory: ./client
      run: npm ci
    
    # Run server tests
    - name: Run server tests
      working-directory: ./server
      env:
        NODE_ENV: test
        MONGO_URI: mongodb://localhost:27017/test_db
        JWT_SECRET: test_secret
      run: npm test
    
    # Run client tests
    - name: Run client tests
      working-directory: ./client
      run: npm test -- --watchAll=false
    
    # Build client for production
    - name: Build client
      working-directory: ./client
      run: npm run build

  deploy:
    needs: test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'
    
    - name: Install Vercel CLI
      run: npm install --global vercel@latest
    
    - name: Check for Vercel Token
      id: check_vercel_token
      run: |
        if [ -z "${{ secrets.VERCEL_TOKEN }}" ]; then
          echo "::warning::VERCEL_TOKEN secret is not set. Deployment to Vercel will be skipped."
          echo "skip_deployment=true" >> $GITHUB_OUTPUT
        else
          echo "skip_deployment=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Pull Vercel Environment Information
      if: steps.check_vercel_token.outputs.skip_deployment == 'false'
      run: |
        vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }} || \
          { echo '::error::Failed to pull Vercel environment'; exit 1; }
    
    - name: Build Project Artifacts
      if: steps.check_vercel_token.outputs.skip_deployment == 'false'
      run: |
        vercel build --token=${{ secrets.VERCEL_TOKEN }} || \
          { echo '::error::Failed to build project artifacts'; exit 1; }
    
    - name: Deploy Project Artifacts to Vercel
      if: steps.check_vercel_token.outputs.skip_deployment == 'false'
      run: |
        vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }} || \
          { echo '::error::Failed to deploy to Vercel'; exit 1; }
    
    - name: Skip Deployment Notice
      if: steps.check_vercel_token.outputs.skip_deployment == 'true'
      run: |
        echo '::notice::Skipping Vercel deployment. Set VERCEL_TOKEN secret to enable deployment.'
